/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SeekersInterface extends ethers.utils.Interface {
  functions: {
    "BIRTHSEEKERPOWERSTART()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DETHSCALEREROLLCOST()": FunctionFragment;
    "MAXPOWER()": FunctionFragment;
    "MAXSEEKERS()": FunctionFragment;
    "POWERPERHOUR()": FunctionFragment;
    "SECONDMINT()": FunctionFragment;
    "SUMMONSEEKERPOWERSTART()": FunctionFragment;
    "activateFirstMint()": FunctionFragment;
    "activateSecondMint()": FunctionFragment;
    "activateThirdMint()": FunctionFragment;
    "addGameContract(address)": FunctionFragment;
    "addKeeper(address)": FunctionFragment;
    "addPower(uint256,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "birthSeeker(address,uint32)": FunctionFragment;
    "burnPower(uint256,uint16)": FunctionFragment;
    "cloakSeeker(uint256)": FunctionFragment;
    "cloakingAvailable()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "currentBuyableSeekers()": FunctionFragment;
    "currentPrice()": FunctionFragment;
    "declareForClan(uint256,address)": FunctionFragment;
    "endGoodsOnly()": FunctionFragment;
    "evilsOnly()": FunctionFragment;
    "firstMintActive()": FunctionFragment;
    "getAlignmentById(uint256)": FunctionFragment;
    "getApById(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getClanById(uint256)": FunctionFragment;
    "getCloakStatusById(uint256)": FunctionFragment;
    "getDethscalesById(uint256)": FunctionFragment;
    "getFullCloak(uint256)": FunctionFragment;
    "getOriginById(uint256)": FunctionFragment;
    "getPowerById(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "goodsOnly()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "keepersSummonSeeker(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownerWithdraw()": FunctionFragment;
    "performCloakingCeremony()": FunctionFragment;
    "released()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "rerollDethscales(uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "secondMintActive()": FunctionFragment;
    "seizureMintIncrement()": FunctionFragment;
    "sendWinnerSeeker(address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "summonSeeker(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "thirdMintActive()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BIRTHSEEKERPOWERSTART",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DETHSCALEREROLLCOST",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAXPOWER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAXSEEKERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POWERPERHOUR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDMINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUMMONSEEKERPOWERSTART",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateFirstMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateSecondMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateThirdMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addGameContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addPower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "birthSeeker",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnPower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cloakSeeker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cloakingAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBuyableSeekers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "declareForClan",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "endGoodsOnly",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "evilsOnly", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstMintActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAlignmentById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClanById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCloakStatusById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDethscalesById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullCloak",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOriginById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "goodsOnly", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "keepersSummonSeeker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performCloakingCeremony",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "released", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rerollDethscales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "secondMintActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seizureMintIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendWinnerSeeker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "summonSeeker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "thirdMintActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BIRTHSEEKERPOWERSTART",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DETHSCALEREROLLCOST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAXPOWER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAXSEEKERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POWERPERHOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SECONDMINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SUMMONSEEKERPOWERSTART",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateFirstMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateSecondMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateThirdMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "birthSeeker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnPower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cloakSeeker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cloakingAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBuyableSeekers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareForClan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endGoodsOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evilsOnly", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAlignmentById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getApById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClanById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCloakStatusById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDethscalesById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullCloak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOriginById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goodsOnly", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keepersSummonSeeker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performCloakingCeremony",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rerollDethscales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizureMintIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendWinnerSeeker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summonSeeker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "thirdMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CloakingAvailable()": EventFragment;
    "DethscalesRerolled(uint256)": EventFragment;
    "FirstMintActivated()": EventFragment;
    "PowerAdded(uint256,uint256,uint256)": EventFragment;
    "PowerBurned(uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SecondMintActivated()": EventFragment;
    "SeekerCloaked(uint256)": EventFragment;
    "SeekerDeclaredToClan(uint256,address)": EventFragment;
    "ThirdMintActivated()": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CloakingAvailable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DethscalesRerolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FirstMintActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecondMintActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeekerCloaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeekerDeclaredToClan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThirdMintActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type CloakingAvailableEvent = TypedEvent<[] & {}>;

export type DethscalesRerolledEvent = TypedEvent<
  [BigNumber] & { id: BigNumber }
>;

export type FirstMintActivatedEvent = TypedEvent<[] & {}>;

export type PowerAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    seekerId: BigNumber;
    powerAdded: BigNumber;
    newPower: BigNumber;
  }
>;

export type PowerBurnedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    seekerId: BigNumber;
    powerBurned: BigNumber;
    newPower: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SecondMintActivatedEvent = TypedEvent<[] & {}>;

export type SeekerCloakedEvent = TypedEvent<
  [BigNumber] & { seekerId: BigNumber }
>;

export type SeekerDeclaredToClanEvent = TypedEvent<
  [BigNumber, string] & { seekerId: BigNumber; clan: string }
>;

export type ThirdMintActivatedEvent = TypedEvent<[] & {}>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class Seekers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SeekersInterface;

  functions: {
    BIRTHSEEKERPOWERSTART(overrides?: CallOverrides): Promise<[number]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DETHSCALEREROLLCOST(overrides?: CallOverrides): Promise<[number]>;

    MAXPOWER(overrides?: CallOverrides): Promise<[number]>;

    MAXSEEKERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    POWERPERHOUR(overrides?: CallOverrides): Promise<[number]>;

    SECONDMINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUMMONSEEKERPOWERSTART(overrides?: CallOverrides): Promise<[number]>;

    activateFirstMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateSecondMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateThirdMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addGameContract(
      gameContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPower(
      id: BigNumberish,
      powerToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    birthSeeker(
      to: string,
      holdTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnPower(
      id: BigNumberish,
      powerToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cloakSeeker(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cloakingAvailable(overrides?: CallOverrides): Promise<[boolean]>;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    currentBuyableSeekers(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    declareForClan(
      id: BigNumberish,
      clanAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endGoodsOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    evilsOnly(overrides?: CallOverrides): Promise<[boolean]>;

    firstMintActive(overrides?: CallOverrides): Promise<[boolean]>;

    getAlignmentById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getApById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[number, number, number, number]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClanById(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getCloakStatusById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDethscalesById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFullCloak(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ]
      ]
    >;

    getOriginById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPowerById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    goodsOnly(overrides?: CallOverrides): Promise<[boolean]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keepersSummonSeeker(
      summonCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerWithdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performCloakingCeremony(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    released(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rerollDethscales(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    secondMintActive(overrides?: CallOverrides): Promise<[boolean]>;

    seizureMintIncrement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendWinnerSeeker(
      winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    summonSeeker(
      summonCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    thirdMintActive(overrides?: CallOverrides): Promise<[boolean]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BIRTHSEEKERPOWERSTART(overrides?: CallOverrides): Promise<number>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DETHSCALEREROLLCOST(overrides?: CallOverrides): Promise<number>;

  MAXPOWER(overrides?: CallOverrides): Promise<number>;

  MAXSEEKERS(overrides?: CallOverrides): Promise<BigNumber>;

  POWERPERHOUR(overrides?: CallOverrides): Promise<number>;

  SECONDMINT(overrides?: CallOverrides): Promise<BigNumber>;

  SUMMONSEEKERPOWERSTART(overrides?: CallOverrides): Promise<number>;

  activateFirstMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateSecondMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activateThirdMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addGameContract(
    gameContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addKeeper(
    newKeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPower(
    id: BigNumberish,
    powerToAdd: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  birthSeeker(
    to: string,
    holdTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnPower(
    id: BigNumberish,
    powerToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cloakSeeker(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cloakingAvailable(overrides?: CallOverrides): Promise<boolean>;

  contractURI(overrides?: CallOverrides): Promise<string>;

  currentBuyableSeekers(overrides?: CallOverrides): Promise<BigNumber>;

  currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  declareForClan(
    id: BigNumberish,
    clanAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endGoodsOnly(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  evilsOnly(overrides?: CallOverrides): Promise<boolean>;

  firstMintActive(overrides?: CallOverrides): Promise<boolean>;

  getAlignmentById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getApById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getClanById(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getCloakStatusById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDethscalesById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getFullCloak(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ]
  >;

  getOriginById(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getPowerById(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  goodsOnly(overrides?: CallOverrides): Promise<boolean>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keepersSummonSeeker(
    summonCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ownerWithdraw(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performCloakingCeremony(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  released(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rerollDethscales(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  secondMintActive(overrides?: CallOverrides): Promise<boolean>;

  seizureMintIncrement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendWinnerSeeker(
    winner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseTokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  summonSeeker(
    summonCount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  thirdMintActive(overrides?: CallOverrides): Promise<boolean>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BIRTHSEEKERPOWERSTART(overrides?: CallOverrides): Promise<number>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DETHSCALEREROLLCOST(overrides?: CallOverrides): Promise<number>;

    MAXPOWER(overrides?: CallOverrides): Promise<number>;

    MAXSEEKERS(overrides?: CallOverrides): Promise<BigNumber>;

    POWERPERHOUR(overrides?: CallOverrides): Promise<number>;

    SECONDMINT(overrides?: CallOverrides): Promise<BigNumber>;

    SUMMONSEEKERPOWERSTART(overrides?: CallOverrides): Promise<number>;

    activateFirstMint(overrides?: CallOverrides): Promise<void>;

    activateSecondMint(overrides?: CallOverrides): Promise<void>;

    activateThirdMint(overrides?: CallOverrides): Promise<void>;

    addGameContract(
      gameContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addKeeper(newKeeper: string, overrides?: CallOverrides): Promise<void>;

    addPower(
      id: BigNumberish,
      powerToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    birthSeeker(
      to: string,
      holdTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnPower(
      id: BigNumberish,
      powerToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cloakSeeker(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cloakingAvailable(overrides?: CallOverrides): Promise<boolean>;

    contractURI(overrides?: CallOverrides): Promise<string>;

    currentBuyableSeekers(overrides?: CallOverrides): Promise<BigNumber>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    declareForClan(
      id: BigNumberish,
      clanAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endGoodsOnly(overrides?: CallOverrides): Promise<void>;

    evilsOnly(overrides?: CallOverrides): Promise<boolean>;

    firstMintActive(overrides?: CallOverrides): Promise<boolean>;

    getAlignmentById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getApById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getClanById(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getCloakStatusById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDethscalesById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getFullCloak(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ]
    >;

    getOriginById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPowerById(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    goodsOnly(overrides?: CallOverrides): Promise<boolean>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keepersSummonSeeker(
      summonCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ownerWithdraw(overrides?: CallOverrides): Promise<void>;

    performCloakingCeremony(overrides?: CallOverrides): Promise<void>;

    released(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rerollDethscales(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    secondMintActive(overrides?: CallOverrides): Promise<boolean>;

    seizureMintIncrement(overrides?: CallOverrides): Promise<void>;

    sendWinnerSeeker(winner: string, overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(baseTokenURI: string, overrides?: CallOverrides): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    summonSeeker(
      summonCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    thirdMintActive(overrides?: CallOverrides): Promise<boolean>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "CloakingAvailable()"(): TypedEventFilter<[], {}>;

    CloakingAvailable(): TypedEventFilter<[], {}>;

    "DethscalesRerolled(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    DethscalesRerolled(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "FirstMintActivated()"(): TypedEventFilter<[], {}>;

    FirstMintActivated(): TypedEventFilter<[], {}>;

    "PowerAdded(uint256,uint256,uint256)"(
      seekerId?: BigNumberish | null,
      powerAdded?: null,
      newPower?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { seekerId: BigNumber; powerAdded: BigNumber; newPower: BigNumber }
    >;

    PowerAdded(
      seekerId?: BigNumberish | null,
      powerAdded?: null,
      newPower?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { seekerId: BigNumber; powerAdded: BigNumber; newPower: BigNumber }
    >;

    "PowerBurned(uint256,uint256,uint256)"(
      seekerId?: BigNumberish | null,
      powerBurned?: null,
      newPower?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { seekerId: BigNumber; powerBurned: BigNumber; newPower: BigNumber }
    >;

    PowerBurned(
      seekerId?: BigNumberish | null,
      powerBurned?: null,
      newPower?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { seekerId: BigNumber; powerBurned: BigNumber; newPower: BigNumber }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SecondMintActivated()"(): TypedEventFilter<[], {}>;

    SecondMintActivated(): TypedEventFilter<[], {}>;

    "SeekerCloaked(uint256)"(
      seekerId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { seekerId: BigNumber }>;

    SeekerCloaked(
      seekerId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { seekerId: BigNumber }>;

    "SeekerDeclaredToClan(uint256,address)"(
      seekerId?: BigNumberish | null,
      clan?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { seekerId: BigNumber; clan: string }
    >;

    SeekerDeclaredToClan(
      seekerId?: BigNumberish | null,
      clan?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { seekerId: BigNumber; clan: string }
    >;

    "ThirdMintActivated()"(): TypedEventFilter<[], {}>;

    ThirdMintActivated(): TypedEventFilter<[], {}>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    BIRTHSEEKERPOWERSTART(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DETHSCALEREROLLCOST(overrides?: CallOverrides): Promise<BigNumber>;

    MAXPOWER(overrides?: CallOverrides): Promise<BigNumber>;

    MAXSEEKERS(overrides?: CallOverrides): Promise<BigNumber>;

    POWERPERHOUR(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDMINT(overrides?: CallOverrides): Promise<BigNumber>;

    SUMMONSEEKERPOWERSTART(overrides?: CallOverrides): Promise<BigNumber>;

    activateFirstMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateSecondMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activateThirdMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addGameContract(
      gameContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPower(
      id: BigNumberish,
      powerToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    birthSeeker(
      to: string,
      holdTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnPower(
      id: BigNumberish,
      powerToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cloakSeeker(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cloakingAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    currentBuyableSeekers(overrides?: CallOverrides): Promise<BigNumber>;

    currentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    declareForClan(
      id: BigNumberish,
      clanAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endGoodsOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    evilsOnly(overrides?: CallOverrides): Promise<BigNumber>;

    firstMintActive(overrides?: CallOverrides): Promise<BigNumber>;

    getAlignmentById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApById(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClanById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCloakStatusById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDethscalesById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullCloak(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOriginById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    goodsOnly(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keepersSummonSeeker(
      summonCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerWithdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performCloakingCeremony(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    released(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rerollDethscales(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    secondMintActive(overrides?: CallOverrides): Promise<BigNumber>;

    seizureMintIncrement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendWinnerSeeker(
      winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    summonSeeker(
      summonCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    thirdMintActive(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BIRTHSEEKERPOWERSTART(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DETHSCALEREROLLCOST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAXPOWER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAXSEEKERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POWERPERHOUR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDMINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUMMONSEEKERPOWERSTART(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateFirstMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateSecondMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activateThirdMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addGameContract(
      gameContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addKeeper(
      newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPower(
      id: BigNumberish,
      powerToAdd: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    birthSeeker(
      to: string,
      holdTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnPower(
      id: BigNumberish,
      powerToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cloakSeeker(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cloakingAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBuyableSeekers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    declareForClan(
      id: BigNumberish,
      clanAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endGoodsOnly(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    evilsOnly(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstMintActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAlignmentById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClanById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCloakStatusById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDethscalesById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullCloak(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOriginById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goodsOnly(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepersSummonSeeker(
      summonCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerWithdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performCloakingCeremony(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    released(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rerollDethscales(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    secondMintActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizureMintIncrement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendWinnerSeeker(
      winner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseTokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    summonSeeker(
      summonCount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thirdMintActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SeasonOneInterface extends ethers.utils.Interface {
  functions: {
    "CLOAKINGTHRESH()": FunctionFragment;
    "CLOINRELEASE()": FunctionFragment;
    "COINLANDER()": FunctionFragment;
    "FIRSTSEEKERMINTTHRESH()": FunctionFragment;
    "GOODSONLYEND()": FunctionFragment;
    "ONECOIN()": FunctionFragment;
    "PERCENTPRIZE()": FunctionFragment;
    "PERCENTRATEINCREASE()": FunctionFragment;
    "SECONDSEEKERMINTTHRESH()": FunctionFragment;
    "SHARD()": FunctionFragment;
    "SHARDSPENDABLE()": FunctionFragment;
    "SHARDTOFRAGMENTMULTIPLIER()": FunctionFragment;
    "SWEETRELEASE()": FunctionFragment;
    "THIRDSEEKERMINTTHRESH()": FunctionFragment;
    "airdropClaimBySeekerId(uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burnShardForFragments(uint256)": FunctionFragment;
    "burnShardForPower(uint256,uint256)": FunctionFragment;
    "changeURI(string)": FunctionFragment;
    "claimAll()": FunctionFragment;
    "claimSingleSeeker()": FunctionFragment;
    "claimedAirdropBySeekerId(uint256)": FunctionFragment;
    "cloinDeposits(uint256)": FunctionFragment;
    "contractURI()": FunctionFragment;
    "firstCommunitySoftLock()": FunctionFragment;
    "gameStarted()": FunctionFragment;
    "getAirdropStatus(uint256)": FunctionFragment;
    "getPendingWithdrawal(address)": FunctionFragment;
    "getSeizureCount()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "keeperShardMint(uint256)": FunctionFragment;
    "lastSeizureTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingWithdrawals(address)": FunctionFragment;
    "prize()": FunctionFragment;
    "released()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "secondCommunitySoftLock()": FunctionFragment;
    "seekers()": FunctionFragment;
    "seize()": FunctionFragment;
    "seizureCount()": FunctionFragment;
    "seizureStake()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContractURI(string)": FunctionFragment;
    "shardSpendable()": FunctionFragment;
    "stakeShardForCloin(uint256)": FunctionFragment;
    "startGame()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CLOAKINGTHRESH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLOINRELEASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COINLANDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIRSTSEEKERMINTTHRESH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOODSONLYEND",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONECOIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENTPRIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTRATEINCREASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDSEEKERMINTTHRESH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SHARD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SHARDSPENDABLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHARDTOFRAGMENTMULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SWEETRELEASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "THIRDSEEKERMINTTHRESH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropClaimBySeekerId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnShardForFragments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnShardForPower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeURI", values: [string]): string;
  encodeFunctionData(functionFragment: "claimAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimSingleSeeker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedAirdropBySeekerId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cloinDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstCommunitySoftLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingWithdrawal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeizureCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperShardMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSeizureTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "prize", values?: undefined): string;
  encodeFunctionData(functionFragment: "released", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "secondCommunitySoftLock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seekers", values?: undefined): string;
  encodeFunctionData(functionFragment: "seize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seizureCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seizureStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shardSpendable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeShardForCloin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "CLOAKINGTHRESH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLOINRELEASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "COINLANDER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FIRSTSEEKERMINTTHRESH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOODSONLYEND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONECOIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTPRIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTRATEINCREASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDSEEKERMINTTHRESH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SHARD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SHARDSPENDABLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SHARDTOFRAGMENTMULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SWEETRELEASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "THIRDSEEKERMINTTHRESH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropClaimBySeekerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnShardForFragments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnShardForPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSingleSeeker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedAirdropBySeekerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cloinDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstCommunitySoftLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeizureCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperShardMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSeizureTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondCommunitySoftLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seekers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seizureCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizureStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shardSpendable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeShardForCloin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "AirdropClaim(uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ClaimedAll(address)": EventFragment;
    "NewCloinDeposit(address,uint16,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Seized(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ShardSpendable()": EventFragment;
    "SweetRelease(address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AirdropClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCloinDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Seized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardSpendable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SweetRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type AirdropClaimEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    account: string;
    operator: string;
    approved: boolean;
  }
>;

export type ClaimedAllEvent = TypedEvent<[string] & { claimer: string }>;

export type NewCloinDepositEvent = TypedEvent<
  [string, number, BigNumber] & {
    depositor: string;
    amount: number;
    depositIdx: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SeizedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    previousOwner: string;
    newOwner: string;
    seizurePrice: BigNumber;
    nextSeizurePrice: BigNumber;
    currentPrize: BigNumber;
    seizureNumber: BigNumber;
  }
>;

export type ShardSpendableEvent = TypedEvent<[] & {}>;

export type SweetReleaseEvent = TypedEvent<[string] & { winner: string }>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type URIEvent = TypedEvent<
  [string, BigNumber] & { value: string; id: BigNumber }
>;

export class SeasonOne extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SeasonOneInterface;

  functions: {
    CLOAKINGTHRESH(overrides?: CallOverrides): Promise<[BigNumber]>;

    CLOINRELEASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    COINLANDER(overrides?: CallOverrides): Promise<[string]>;

    FIRSTSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<[BigNumber]>;

    GOODSONLYEND(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONECOIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTPRIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTRATEINCREASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECONDSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<[BigNumber]>;

    SHARD(overrides?: CallOverrides): Promise<[BigNumber]>;

    SHARDSPENDABLE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SHARDTOFRAGMENTMULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    SWEETRELEASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    THIRDSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<[BigNumber]>;

    airdropClaimBySeekerId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burnShardForFragments(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnShardForPower(
      seekerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeURI(
      _newURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSingleSeeker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimedAirdropBySeekerId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cloinDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        depositor: string;
        amount: number;
        blockNumber: BigNumber;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    firstCommunitySoftLock(overrides?: CallOverrides): Promise<[boolean]>;

    gameStarted(overrides?: CallOverrides): Promise<[boolean]>;

    getAirdropStatus(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPendingWithdrawal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    getSeizureCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keeperShardMint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastSeizureTime(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { _withdrawValue: BigNumber; _shardOwed: number }
    >;

    prize(overrides?: CallOverrides): Promise<[BigNumber]>;

    released(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    secondCommunitySoftLock(overrides?: CallOverrides): Promise<[boolean]>;

    seekers(overrides?: CallOverrides): Promise<[string]>;

    seize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seizureCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    seizureStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shardSpendable(overrides?: CallOverrides): Promise<[boolean]>;

    stakeShardForCloin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  CLOAKINGTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

  CLOINRELEASE(overrides?: CallOverrides): Promise<BigNumber>;

  COINLANDER(overrides?: CallOverrides): Promise<string>;

  FIRSTSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

  GOODSONLYEND(overrides?: CallOverrides): Promise<BigNumber>;

  ONECOIN(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTPRIZE(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTRATEINCREASE(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

  SHARD(overrides?: CallOverrides): Promise<BigNumber>;

  SHARDSPENDABLE(overrides?: CallOverrides): Promise<BigNumber>;

  SHARDTOFRAGMENTMULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  SWEETRELEASE(overrides?: CallOverrides): Promise<BigNumber>;

  THIRDSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

  airdropClaimBySeekerId(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burnShardForFragments(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnShardForPower(
    seekerId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeURI(
    _newURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSingleSeeker(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimedAirdropBySeekerId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cloinDeposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      depositor: string;
      amount: number;
      blockNumber: BigNumber;
    }
  >;

  contractURI(overrides?: CallOverrides): Promise<string>;

  firstCommunitySoftLock(overrides?: CallOverrides): Promise<boolean>;

  gameStarted(overrides?: CallOverrides): Promise<boolean>;

  getAirdropStatus(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPendingWithdrawal(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getSeizureCount(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keeperShardMint(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastSeizureTime(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingWithdrawals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number] & { _withdrawValue: BigNumber; _shardOwed: number }
  >;

  prize(overrides?: CallOverrides): Promise<BigNumber>;

  released(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  secondCommunitySoftLock(overrides?: CallOverrides): Promise<boolean>;

  seekers(overrides?: CallOverrides): Promise<string>;

  seize(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seizureCount(overrides?: CallOverrides): Promise<BigNumber>;

  seizureStake(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractURI(
    newContractURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shardSpendable(overrides?: CallOverrides): Promise<boolean>;

  stakeShardForCloin(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CLOAKINGTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

    CLOINRELEASE(overrides?: CallOverrides): Promise<BigNumber>;

    COINLANDER(overrides?: CallOverrides): Promise<string>;

    FIRSTSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

    GOODSONLYEND(overrides?: CallOverrides): Promise<BigNumber>;

    ONECOIN(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTPRIZE(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTRATEINCREASE(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

    SHARD(overrides?: CallOverrides): Promise<BigNumber>;

    SHARDSPENDABLE(overrides?: CallOverrides): Promise<BigNumber>;

    SHARDTOFRAGMENTMULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    SWEETRELEASE(overrides?: CallOverrides): Promise<BigNumber>;

    THIRDSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

    airdropClaimBySeekerId(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burnShardForFragments(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnShardForPower(
      seekerId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeURI(_newURI: string, overrides?: CallOverrides): Promise<void>;

    claimAll(overrides?: CallOverrides): Promise<void>;

    claimSingleSeeker(overrides?: CallOverrides): Promise<void>;

    claimedAirdropBySeekerId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cloinDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        depositor: string;
        amount: number;
        blockNumber: BigNumber;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<string>;

    firstCommunitySoftLock(overrides?: CallOverrides): Promise<boolean>;

    gameStarted(overrides?: CallOverrides): Promise<boolean>;

    getAirdropStatus(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPendingWithdrawal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getSeizureCount(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeperShardMint(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastSeizureTime(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number] & { _withdrawValue: BigNumber; _shardOwed: number }
    >;

    prize(overrides?: CallOverrides): Promise<BigNumber>;

    released(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    secondCommunitySoftLock(overrides?: CallOverrides): Promise<boolean>;

    seekers(overrides?: CallOverrides): Promise<string>;

    seize(overrides?: CallOverrides): Promise<void>;

    seizureCount(overrides?: CallOverrides): Promise<BigNumber>;

    seizureStake(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractURI(
      newContractURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shardSpendable(overrides?: CallOverrides): Promise<boolean>;

    stakeShardForCloin(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startGame(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AirdropClaim(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    AirdropClaim(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    "ClaimedAll(address)"(
      claimer?: null
    ): TypedEventFilter<[string], { claimer: string }>;

    ClaimedAll(claimer?: null): TypedEventFilter<[string], { claimer: string }>;

    "NewCloinDeposit(address,uint16,uint256)"(
      depositor?: null,
      amount?: null,
      depositIdx?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { depositor: string; amount: number; depositIdx: BigNumber }
    >;

    NewCloinDeposit(
      depositor?: null,
      amount?: null,
      depositIdx?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { depositor: string; amount: number; depositIdx: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Seized(address,address,uint256,uint256,uint256,uint256)"(
      previousOwner?: null,
      newOwner?: null,
      seizurePrice?: null,
      nextSeizurePrice?: null,
      currentPrize?: null,
      seizureNumber?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        previousOwner: string;
        newOwner: string;
        seizurePrice: BigNumber;
        nextSeizurePrice: BigNumber;
        currentPrize: BigNumber;
        seizureNumber: BigNumber;
      }
    >;

    Seized(
      previousOwner?: null,
      newOwner?: null,
      seizurePrice?: null,
      nextSeizurePrice?: null,
      currentPrize?: null,
      seizureNumber?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        previousOwner: string;
        newOwner: string;
        seizurePrice: BigNumber;
        nextSeizurePrice: BigNumber;
        currentPrize: BigNumber;
        seizureNumber: BigNumber;
      }
    >;

    "ShardSpendable()"(): TypedEventFilter<[], {}>;

    ShardSpendable(): TypedEventFilter<[], {}>;

    "SweetRelease(address)"(
      winner?: null
    ): TypedEventFilter<[string], { winner: string }>;

    SweetRelease(winner?: null): TypedEventFilter<[string], { winner: string }>;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    URI(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    CLOAKINGTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

    CLOINRELEASE(overrides?: CallOverrides): Promise<BigNumber>;

    COINLANDER(overrides?: CallOverrides): Promise<BigNumber>;

    FIRSTSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

    GOODSONLYEND(overrides?: CallOverrides): Promise<BigNumber>;

    ONECOIN(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTPRIZE(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTRATEINCREASE(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

    SHARD(overrides?: CallOverrides): Promise<BigNumber>;

    SHARDSPENDABLE(overrides?: CallOverrides): Promise<BigNumber>;

    SHARDTOFRAGMENTMULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    SWEETRELEASE(overrides?: CallOverrides): Promise<BigNumber>;

    THIRDSEEKERMINTTHRESH(overrides?: CallOverrides): Promise<BigNumber>;

    airdropClaimBySeekerId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnShardForFragments(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnShardForPower(
      seekerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeURI(
      _newURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSingleSeeker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimedAirdropBySeekerId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cloinDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    firstCommunitySoftLock(overrides?: CallOverrides): Promise<BigNumber>;

    gameStarted(overrides?: CallOverrides): Promise<BigNumber>;

    getAirdropStatus(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingWithdrawal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeizureCount(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeperShardMint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastSeizureTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prize(overrides?: CallOverrides): Promise<BigNumber>;

    released(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    secondCommunitySoftLock(overrides?: CallOverrides): Promise<BigNumber>;

    seekers(overrides?: CallOverrides): Promise<BigNumber>;

    seize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seizureCount(overrides?: CallOverrides): Promise<BigNumber>;

    seizureStake(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shardSpendable(overrides?: CallOverrides): Promise<BigNumber>;

    stakeShardForCloin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CLOAKINGTHRESH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CLOINRELEASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COINLANDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FIRSTSEEKERMINTTHRESH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOODSONLYEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONECOIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTPRIZE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTRATEINCREASE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SECONDSEEKERMINTTHRESH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SHARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SHARDSPENDABLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SHARDTOFRAGMENTMULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SWEETRELEASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    THIRDSEEKERMINTTHRESH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdropClaimBySeekerId(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnShardForFragments(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnShardForPower(
      seekerId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeURI(
      _newURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSingleSeeker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimedAirdropBySeekerId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cloinDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstCommunitySoftLock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAirdropStatus(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingWithdrawal(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeizureCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeperShardMint(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastSeizureTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    released(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    secondCommunitySoftLock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seekers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seize(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seizureCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seizureStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractURI(
      newContractURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shardSpendable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeShardForCloin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

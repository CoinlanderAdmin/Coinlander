/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC721MarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "createDefaultNftAuction(address,uint256,uint128,uint128)": FunctionFragment;
    "createNewNftAuction(address,uint256,uint128,uint128,uint32,uint32)": FunctionFragment;
    "createSale(address,uint256,uint128,address,address,uint32)": FunctionFragment;
    "defaultAuctionBidPeriod()": FunctionFragment;
    "defaultBidIncreasePercentage()": FunctionFragment;
    "defaultFeeCollector()": FunctionFragment;
    "defaultFeePercentage()": FunctionFragment;
    "makeBid(address,uint256)": FunctionFragment;
    "makeCustomBid(address,uint256,address)": FunctionFragment;
    "maximumMinPricePercentage()": FunctionFragment;
    "minimumSettableIncreasePercentage()": FunctionFragment;
    "nftContractAuctions(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOfNFT(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultFeeCollector(address)": FunctionFragment;
    "setDefaultFeePercentage(uint32)": FunctionFragment;
    "settleAuction(address,uint256)": FunctionFragment;
    "takeHighestBid(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBuyNowPrice(address,uint256,uint128)": FunctionFragment;
    "updateMinimumPrice(address,uint256,uint128)": FunctionFragment;
    "updateWhitelistedBuyer(address,uint256,address)": FunctionFragment;
    "withdrawAllFailedCredits()": FunctionFragment;
    "withdrawAuction(address,uint256)": FunctionFragment;
    "withdrawBid(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createDefaultNftAuction",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewNftAuction",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [string, BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAuctionBidPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultBidIncreasePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeBid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCustomBid",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumMinPricePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumSettableIncreasePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContractAuctions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOfNFT",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeHighestBid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBuyNowPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistedBuyer",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllFailedCredits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBid",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createDefaultNftAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewNftAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultAuctionBidPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultBidIncreasePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeCustomBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumMinPricePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumSettableIncreasePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContractAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOfNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBuyNowPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistedBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllFailedCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBid",
    data: BytesLike
  ): Result;

  events: {
    "AuctionPeriodUpdated(address,uint256,uint64)": EventFragment;
    "AuctionSettled(address,uint256,address)": EventFragment;
    "AuctionWithdrawn(address,uint256,address)": EventFragment;
    "BidMade(address,uint256,address,uint256)": EventFragment;
    "BidWithdrawn(address,uint256,address)": EventFragment;
    "BuyNowPriceUpdated(address,uint256,uint128)": EventFragment;
    "HighestBidTaken(address,uint256)": EventFragment;
    "MinimumPriceUpdated(address,uint256,uint256)": EventFragment;
    "NFTTransferredAndSellerPaid(address,uint256,address,uint128,address,address)": EventFragment;
    "NftAuctionCreated(address,uint256,address,uint128,uint128,uint32,uint32,address,uint32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SaleCreated(address,uint256,address,uint128,address,address,uint32)": EventFragment;
    "WhitelistedBuyerUpdated(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidMade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyNowPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighestBidTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumPriceUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NFTTransferredAndSellerPaid"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftAuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedBuyerUpdated"): EventFragment;
}

export type AuctionPeriodUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    auctionEndPeriod: BigNumber;
  }
>;

export type AuctionSettledEvent = TypedEvent<
  [string, BigNumber, string] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    auctionSettler: string;
  }
>;

export type AuctionWithdrawnEvent = TypedEvent<
  [string, BigNumber, string] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    nftOwner: string;
  }
>;

export type BidMadeEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    bidder: string;
    ethAmount: BigNumber;
  }
>;

export type BidWithdrawnEvent = TypedEvent<
  [string, BigNumber, string] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    highestBidder: string;
  }
>;

export type BuyNowPriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    newBuyNowPrice: BigNumber;
  }
>;

export type HighestBidTakenEvent = TypedEvent<
  [string, BigNumber] & { nftContractAddress: string; tokenId: BigNumber }
>;

export type MinimumPriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    newMinPrice: BigNumber;
  }
>;

export type NFTTransferredAndSellerPaidEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    nftSeller: string;
    nftHighestBid: BigNumber;
    nftHighestBidder: string;
    nftRecipient: string;
  }
>;

export type NftAuctionCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    string,
    number
  ] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    nftSeller: string;
    minPrice: BigNumber;
    buyNowPrice: BigNumber;
    auctionBidPeriod: number;
    bidIncreasePercentage: number;
    feeRecipient: string;
    feePercentage: number;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SaleCreatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string, number] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    nftSeller: string;
    buyNowPrice: BigNumber;
    whitelistedBuyer: string;
    feeRecipient: string;
    feePercentage: number;
  }
>;

export type WhitelistedBuyerUpdatedEvent = TypedEvent<
  [string, BigNumber, string] & {
    nftContractAddress: string;
    tokenId: BigNumber;
    newWhitelistedBuyer: string;
  }
>;

export class ERC721Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721MarketplaceInterface;

  functions: {
    createDefaultNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      _auctionBidPeriod: BigNumberish,
      _bidIncreasePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSale(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _buyNowPrice: BigNumberish,
      _whitelistedBuyer: string,
      _feeRecipient: string,
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultAuctionBidPeriod(overrides?: CallOverrides): Promise<[number]>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<[number]>;

    defaultFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    defaultFeePercentage(overrides?: CallOverrides): Promise<[number]>;

    makeBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeCustomBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _nftRecipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maximumMinPricePercentage(overrides?: CallOverrides): Promise<[number]>;

    minimumSettableIncreasePercentage(
      overrides?: CallOverrides
    ): Promise<[number]>;

    nftContractAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        number
      ] & {
        bidIncreasePercentage: number;
        auctionBidPeriod: number;
        auctionEnd: BigNumber;
        minPrice: BigNumber;
        buyNowPrice: BigNumber;
        nftHighestBid: BigNumber;
        nftHighestBidder: string;
        nftSeller: string;
        whitelistedBuyer: string;
        nftRecipient: string;
        feeRecipient: string;
        feePercentage: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOfNFT(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeHighestBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBuyNowPrice(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newBuyNowPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMinimumPrice(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newMinPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWhitelistedBuyer(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newWhitelistedBuyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllFailedCredits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createDefaultNftAuction(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _minPrice: BigNumberish,
    _buyNowPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewNftAuction(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _minPrice: BigNumberish,
    _buyNowPrice: BigNumberish,
    _auctionBidPeriod: BigNumberish,
    _bidIncreasePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSale(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _buyNowPrice: BigNumberish,
    _whitelistedBuyer: string,
    _feeRecipient: string,
    _feePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultAuctionBidPeriod(overrides?: CallOverrides): Promise<number>;

  defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<number>;

  defaultFeeCollector(overrides?: CallOverrides): Promise<string>;

  defaultFeePercentage(overrides?: CallOverrides): Promise<number>;

  makeBid(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeCustomBid(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _nftRecipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maximumMinPricePercentage(overrides?: CallOverrides): Promise<number>;

  minimumSettableIncreasePercentage(overrides?: CallOverrides): Promise<number>;

  nftContractAuctions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      number
    ] & {
      bidIncreasePercentage: number;
      auctionBidPeriod: number;
      auctionEnd: BigNumber;
      minPrice: BigNumber;
      buyNowPrice: BigNumber;
      nftHighestBid: BigNumber;
      nftHighestBidder: string;
      nftSeller: string;
      whitelistedBuyer: string;
      nftRecipient: string;
      feeRecipient: string;
      feePercentage: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOfNFT(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultFeePercentage(
    _feePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeHighestBid(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBuyNowPrice(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _newBuyNowPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMinimumPrice(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _newMinPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWhitelistedBuyer(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    _newWhitelistedBuyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllFailedCredits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAuction(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBid(
    _nftContractAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createDefaultNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      _auctionBidPeriod: BigNumberish,
      _bidIncreasePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSale(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _buyNowPrice: BigNumberish,
      _whitelistedBuyer: string,
      _feeRecipient: string,
      _feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultAuctionBidPeriod(overrides?: CallOverrides): Promise<number>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<number>;

    defaultFeeCollector(overrides?: CallOverrides): Promise<string>;

    defaultFeePercentage(overrides?: CallOverrides): Promise<number>;

    makeBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeCustomBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _nftRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maximumMinPricePercentage(overrides?: CallOverrides): Promise<number>;

    minimumSettableIncreasePercentage(
      overrides?: CallOverrides
    ): Promise<number>;

    nftContractAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        number
      ] & {
        bidIncreasePercentage: number;
        auctionBidPeriod: number;
        auctionEnd: BigNumber;
        minPrice: BigNumber;
        buyNowPrice: BigNumber;
        nftHighestBid: BigNumber;
        nftHighestBidder: string;
        nftSeller: string;
        whitelistedBuyer: string;
        nftRecipient: string;
        feeRecipient: string;
        feePercentage: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOfNFT(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDefaultFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeHighestBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBuyNowPrice(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newBuyNowPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMinimumPrice(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newMinPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWhitelistedBuyer(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newWhitelistedBuyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAllFailedCredits(overrides?: CallOverrides): Promise<void>;

    withdrawAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionPeriodUpdated(address,uint256,uint64)"(
      nftContractAddress?: null,
      tokenId?: null,
      auctionEndPeriod?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        auctionEndPeriod: BigNumber;
      }
    >;

    AuctionPeriodUpdated(
      nftContractAddress?: null,
      tokenId?: null,
      auctionEndPeriod?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        auctionEndPeriod: BigNumber;
      }
    >;

    "AuctionSettled(address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      auctionSettler?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nftContractAddress: string; tokenId: BigNumber; auctionSettler: string }
    >;

    AuctionSettled(
      nftContractAddress?: null,
      tokenId?: null,
      auctionSettler?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nftContractAddress: string; tokenId: BigNumber; auctionSettler: string }
    >;

    "AuctionWithdrawn(address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      nftOwner?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nftContractAddress: string; tokenId: BigNumber; nftOwner: string }
    >;

    AuctionWithdrawn(
      nftContractAddress?: null,
      tokenId?: null,
      nftOwner?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nftContractAddress: string; tokenId: BigNumber; nftOwner: string }
    >;

    "BidMade(address,uint256,address,uint256)"(
      nftContractAddress?: null,
      tokenId?: null,
      bidder?: null,
      ethAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        bidder: string;
        ethAmount: BigNumber;
      }
    >;

    BidMade(
      nftContractAddress?: null,
      tokenId?: null,
      bidder?: null,
      ethAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        bidder: string;
        ethAmount: BigNumber;
      }
    >;

    "BidWithdrawn(address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      highestBidder?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nftContractAddress: string; tokenId: BigNumber; highestBidder: string }
    >;

    BidWithdrawn(
      nftContractAddress?: null,
      tokenId?: null,
      highestBidder?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { nftContractAddress: string; tokenId: BigNumber; highestBidder: string }
    >;

    "BuyNowPriceUpdated(address,uint256,uint128)"(
      nftContractAddress?: null,
      tokenId?: null,
      newBuyNowPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        newBuyNowPrice: BigNumber;
      }
    >;

    BuyNowPriceUpdated(
      nftContractAddress?: null,
      tokenId?: null,
      newBuyNowPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        newBuyNowPrice: BigNumber;
      }
    >;

    "HighestBidTaken(address,uint256)"(
      nftContractAddress?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { nftContractAddress: string; tokenId: BigNumber }
    >;

    HighestBidTaken(
      nftContractAddress?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { nftContractAddress: string; tokenId: BigNumber }
    >;

    "MinimumPriceUpdated(address,uint256,uint256)"(
      nftContractAddress?: null,
      tokenId?: null,
      newMinPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { nftContractAddress: string; tokenId: BigNumber; newMinPrice: BigNumber }
    >;

    MinimumPriceUpdated(
      nftContractAddress?: null,
      tokenId?: null,
      newMinPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { nftContractAddress: string; tokenId: BigNumber; newMinPrice: BigNumber }
    >;

    "NFTTransferredAndSellerPaid(address,uint256,address,uint128,address,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      nftHighestBid?: null,
      nftHighestBidder?: null,
      nftRecipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, string],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        nftSeller: string;
        nftHighestBid: BigNumber;
        nftHighestBidder: string;
        nftRecipient: string;
      }
    >;

    NFTTransferredAndSellerPaid(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      nftHighestBid?: null,
      nftHighestBidder?: null,
      nftRecipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, string],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        nftSeller: string;
        nftHighestBid: BigNumber;
        nftHighestBidder: string;
        nftRecipient: string;
      }
    >;

    "NftAuctionCreated(address,uint256,address,uint128,uint128,uint32,uint32,address,uint32)"(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      minPrice?: null,
      buyNowPrice?: null,
      auctionBidPeriod?: null,
      bidIncreasePercentage?: null,
      feeRecipient?: null,
      feePercentage?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        number
      ],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        nftSeller: string;
        minPrice: BigNumber;
        buyNowPrice: BigNumber;
        auctionBidPeriod: number;
        bidIncreasePercentage: number;
        feeRecipient: string;
        feePercentage: number;
      }
    >;

    NftAuctionCreated(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      minPrice?: null,
      buyNowPrice?: null,
      auctionBidPeriod?: null,
      bidIncreasePercentage?: null,
      feeRecipient?: null,
      feePercentage?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        string,
        number
      ],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        nftSeller: string;
        minPrice: BigNumber;
        buyNowPrice: BigNumber;
        auctionBidPeriod: number;
        bidIncreasePercentage: number;
        feeRecipient: string;
        feePercentage: number;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SaleCreated(address,uint256,address,uint128,address,address,uint32)"(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      buyNowPrice?: null,
      whitelistedBuyer?: null,
      feeRecipient?: null,
      feePercentage?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, string, number],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        nftSeller: string;
        buyNowPrice: BigNumber;
        whitelistedBuyer: string;
        feeRecipient: string;
        feePercentage: number;
      }
    >;

    SaleCreated(
      nftContractAddress?: null,
      tokenId?: null,
      nftSeller?: null,
      buyNowPrice?: null,
      whitelistedBuyer?: null,
      feeRecipient?: null,
      feePercentage?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, string, number],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        nftSeller: string;
        buyNowPrice: BigNumber;
        whitelistedBuyer: string;
        feeRecipient: string;
        feePercentage: number;
      }
    >;

    "WhitelistedBuyerUpdated(address,uint256,address)"(
      nftContractAddress?: null,
      tokenId?: null,
      newWhitelistedBuyer?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        newWhitelistedBuyer: string;
      }
    >;

    WhitelistedBuyerUpdated(
      nftContractAddress?: null,
      tokenId?: null,
      newWhitelistedBuyer?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        nftContractAddress: string;
        tokenId: BigNumber;
        newWhitelistedBuyer: string;
      }
    >;
  };

  estimateGas: {
    createDefaultNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      _auctionBidPeriod: BigNumberish,
      _bidIncreasePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSale(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _buyNowPrice: BigNumberish,
      _whitelistedBuyer: string,
      _feeRecipient: string,
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultAuctionBidPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    defaultBidIncreasePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    defaultFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    defaultFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    makeBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeCustomBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _nftRecipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maximumMinPricePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minimumSettableIncreasePercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftContractAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOfNFT(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeHighestBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBuyNowPrice(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newBuyNowPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMinimumPrice(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newMinPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWhitelistedBuyer(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newWhitelistedBuyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllFailedCredits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDefaultNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewNftAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _minPrice: BigNumberish,
      _buyNowPrice: BigNumberish,
      _auctionBidPeriod: BigNumberish,
      _bidIncreasePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSale(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _buyNowPrice: BigNumberish,
      _whitelistedBuyer: string,
      _feeRecipient: string,
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultAuctionBidPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultBidIncreasePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultFeeCollector(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeCustomBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _nftRecipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maximumMinPricePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumSettableIncreasePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftContractAuctions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOfNFT(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultFeePercentage(
      _feePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeHighestBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBuyNowPrice(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newBuyNowPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMinimumPrice(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newMinPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWhitelistedBuyer(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      _newWhitelistedBuyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllFailedCredits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAuction(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBid(
      _nftContractAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

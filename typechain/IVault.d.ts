/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVaultInterface extends ethers.utils.Interface {
  functions: {
    "claimKeepersVault()": FunctionFragment;
    "fundPrizePurse()": FunctionFragment;
    "requestFragments(address,uint256)": FunctionFragment;
    "setSweetRelease()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimKeepersVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundPrizePurse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFragments",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSweetRelease",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimKeepersVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundPrizePurse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFragments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSweetRelease",
    data: BytesLike
  ): Result;

  events: {
    "RandomnessFulfilled(uint16,uint16)": EventFragment;
    "RandomnessOracleChanged(address,address)": EventFragment;
    "RandomnessRequested(address,uint16)": EventFragment;
    "VaultUnlocked(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RandomnessFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomnessOracleChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomnessRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultUnlocked"): EventFragment;
}

export type RandomnessFulfilledEvent = TypedEvent<
  [number, number] & { requestId: number; result: number }
>;

export type RandomnessOracleChangedEvent = TypedEvent<
  [string, string] & { currentOracle: string; newOracle: string }
>;

export type RandomnessRequestedEvent = TypedEvent<
  [string, number] & { requester: string; requestId: number }
>;

export type VaultUnlockedEvent = TypedEvent<[string] & { winner: string }>;

export class IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVaultInterface;

  functions: {
    claimKeepersVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundPrizePurse(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestFragments(
      _requester: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSweetRelease(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimKeepersVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundPrizePurse(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestFragments(
    _requester: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSweetRelease(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimKeepersVault(overrides?: CallOverrides): Promise<void>;

    fundPrizePurse(overrides?: CallOverrides): Promise<void>;

    requestFragments(
      _requester: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSweetRelease(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RandomnessFulfilled(uint16,uint16)"(
      requestId?: null,
      result?: null
    ): TypedEventFilter<
      [number, number],
      { requestId: number; result: number }
    >;

    RandomnessFulfilled(
      requestId?: null,
      result?: null
    ): TypedEventFilter<
      [number, number],
      { requestId: number; result: number }
    >;

    "RandomnessOracleChanged(address,address)"(
      currentOracle?: null,
      newOracle?: null
    ): TypedEventFilter<
      [string, string],
      { currentOracle: string; newOracle: string }
    >;

    RandomnessOracleChanged(
      currentOracle?: null,
      newOracle?: null
    ): TypedEventFilter<
      [string, string],
      { currentOracle: string; newOracle: string }
    >;

    "RandomnessRequested(address,uint16)"(
      requester?: null,
      requestId?: null
    ): TypedEventFilter<
      [string, number],
      { requester: string; requestId: number }
    >;

    RandomnessRequested(
      requester?: null,
      requestId?: null
    ): TypedEventFilter<
      [string, number],
      { requester: string; requestId: number }
    >;

    "VaultUnlocked(address)"(
      winner?: null
    ): TypedEventFilter<[string], { winner: string }>;

    VaultUnlocked(
      winner?: null
    ): TypedEventFilter<[string], { winner: string }>;
  };

  estimateGas: {
    claimKeepersVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundPrizePurse(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestFragments(
      _requester: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSweetRelease(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimKeepersVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundPrizePurse(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestFragments(
      _requester: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSweetRelease(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
